#
# ------------------------------------------------------------------------
#
function(ebertolazzi_artifacts_suffix VAR_NAME BUILD_STATIC)
  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(suffix "_debug")
  endif()
  if (${BUILD_STATIC})
    set(suffix "_static${suffix}")
  endif()
  if(APPLE)
    set(${VAR_NAME} _osx${suffix} PARENT_SCOPE)
  elseif(UNIX)
    set(${VAR_NAME} _linux${suffix} PARENT_SCOPE)
  else()
    set(${VAR_NAME} "_win_${BITS}${suffix}" PARENT_SCOPE)
  endif()
endfunction()
#
# ------------------------------------------------------------------------
#
function( ebertolazzi_setup_target TARGET_NAME SOURCE_DIR SOURCE_LIST )

  set( TARGET_S "${EB_NAMESPACE}_${TARGET_NAME}_Static" )
  set( TARGET_D "${EB_NAMESPACE}_${TARGET_NAME}" )

  add_library( ${TARGET_S} STATIC ${SOURCE_LIST} )
  target_include_directories(
    ${TARGET_S} PUBLIC
    "$<BUILD_INTERFACE:${SOURCE_DIR}>"
    "$<INSTALL_INTERFACE:include>"
  )
  set_target_properties(
    ${TARGET_S} PROPERTIES
    OUTPUT_NAME "${TARGET_NAME}${ARTIFACTS_STATIC_SUFFIX}"
    POSITION_INDEPENDENT_CODE ON
  )

  # ALIASES
  add_library( "${EB_NAMESPACE}::${TARGET_NAME}_Static" ALIAS ${TARGET_S} )

  set( TARGET_TO_BE_INSTALLED ${TARGET_TO_BE_INSTALLED} ${TARGET_S} PARENT_SCOPE )

  if ( INSTALL_LOCAL )
    add_dependencies( post_build_target ${TARGET_S} )
  endif()

  # Utils Dynamic Library
  if ( BUILD_SHARED )
    add_library( ${TARGET_D} SHARED ${SOURCE_LIST} )
    target_include_directories(
      ${TARGET_D} PUBLIC
      "$<BUILD_INTERFACE:${SOURCE_DIR}>"
      "$<INSTALL_INTERFACE:include/${TARGET_NAME}>"
    )
    set_target_properties(
      ${TARGET_D} PROPERTIES
      OUTPUT_NAME "${TARGET_NAME}${ARTIFACTS_DYNAMIC_SUFFIX}"
      POSITION_INDEPENDENT_CODE ON
    )
    if (WIN32)
      set_target_properties(
        ${TARGET_D} PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS TRUE
      )
    endif()

    # ALIASES
    add_library( "${EB_NAMESPACE}::${TARGET_NAME}" ALIAS ${TARGET_D} )

    set( TARGET_TO_BE_INSTALLED ${TARGET_TO_BE_INSTALLED} ${TARGET_D} PARENT_SCOPE )

    if ( INSTALL_LOCAL )
      add_dependencies( post_build_target ${TARGET_D} )
    endif()

  endif()
endfunction()
#
# ------------------------------------------------------------------------
#
function(ebertolazzi_final_messages)
  if(SSE_FLAGS)
    message(STATUS "Using ${SSE_FLAGS} extensions")
  endif()
  message(STATUS "C compiler                  = ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER}")
  message(STATUS "C++ compiler                = ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER}")
  message(STATUS "CMAKE_CXX_FLAGS_RELEASE     = ${CMAKE_CXX_FLAGS_RELEASE}")
  message(STATUS "CMAKE_CXX_FLAGS             = ${CMAKE_CXX_FLAGS}")
  message(STATUS "CMAKE_C_FLAGS_RELEASE       = ${CMAKE_C_FLAGS_RELEASE}")
  message(STATUS "CMAKE_C_FLAGS               = ${CMAKE_C_FLAGS}")
  message(STATUS "CMAKE_SYSTEM_NAME           = ${CMAKE_SYSTEM_NAME}")
  message(STATUS "CMAKE_SYSTEM_PROCESSOR      = ${CMAKE_SYSTEM_PROCESSOR}")
  if(APPLE)
    message( STATUS "CMAKE_OSX_SYSROOT           = ${CMAKE_OSX_SYSROOT}" )
    message( STATUS "CMAKE_OSX_ARCHITECTURES     = ${CMAKE_OSX_ARCHITECTURES}" )
    message( STATUS "CMAKE_OSX_DEPLOYMENT_TARGET = ${CMAKE_OSX_DEPLOYMENT_TARGET}" )
  endif()
  message(STATUS "SOURCES = ${SOURCES}")
  message(STATUS "HEADERS = ${HEADERS}")
  message(STATUS "TARGET_TO_BE_INSTALLED = ${TARGET_TO_BE_INSTALLED}")
endfunction()